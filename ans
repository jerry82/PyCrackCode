.1. How to store stock price:

open, high, low, close = 5000 x 4 = 20,000
1000 daily users : 
Solutions:
use Text file: (hard to modified)
use XML file: (easy to read, moderate to modify if data is big)
use Database: (easy to read, write, load balance, extensible)


.2. represent big graph Facebook or Linkedin

Use graph data structure
represent each person as a class 
graph node store only person id

public class Person {
	public String Name { get; set; }
	public String LastName { get; set; }
	public String Email { get; set; }
	public String Id { get; set; }
	public List<string> FriendIds { get; set; }
}

public class Node {
	public string Id { get; set; }
	public string personId { get; set }
	public List<string> FIds { get; set; }
	public string MachineId { get; set; }


}

AppLogic.getFriends(visited, curNode);

public class AppLogic {
	//...

	public Person getPerson(Node node) {
		string machineId = noe.MachineId;

		return Server.getPerson(machineId, node.Id);
	}

	//...
}

public class Program {
	
	private Graph _graph = null
	public Program(Graph graph) {
		_graph = graph;
	}

	//implement BFS
	public void BuildPath(string person1Id, string person2Id) {

		TraceNode node1Id = DB.getNodeId(person1Id);
		TraceNode node2Id = DB.getNodeId(person2Id);

		//BFS to connect node
		Dictionary<TraceNode, int> visited = new Dictionary<TraceNode, int>()		
		Queue<TraceNode> myQ = new Queue<TraceNode>();
		myQ.Enqueue(node1Id);

		while(myQ.Count > 0) {
			TraceNode curNode = myQ.Dequeue();
			visited.Add(curNode, 1);

			//make sure the friend not in visted list
			List<TraceNode> friends = AppLogic.getFriends(visited, curNode);
			foreach (TraceNode friend in friends) { 
				if (friend == node2Id) {
					//found
					break;
				}
		
				//for trace back
				friend.Prev = curNode
				myQ.Enqueue(friend)
			}
		}

		//DFS
		Stack<TraceNode> myS = new Stack<TraceNode>();

		myS.Push(node1Id);

		while (myS.Count > 0) {
			TraceNode cur = myS.Peek();

			visited.Add(cur);

			//friend not visited and friend has some similiar geographical location with node2Id
			TraceNode friend = AppLogic.getOneFriend(visited, cur);

			if (friend != null) {

				if (friend == node2Id) {
					//found
					break;
				}
				//for backtracking
				friend.prev = curNode
				myS.Push(friend);
				visited.Add(friend, 1);
			}
			else {
				myS.Pop();
			}


		}
		
	}
}

.3 Stack vs Heap 
Stack: 
	. code, value type, manage its own memory, clear the unused slot
	. not garbage collectible
	. extremely fast, access from processor by stack pointer, pointer move updown to 
	assign or clear the memory

Heap: 
	. reference type, pointer, need GC to manage the space

.4 Hadoop and Map Reduce
Opensource software that allow concurrently map the program to distributed node, execute
program on each node paralelly and combine the result to return result to the request(Reduce) 
HDFS: Hadoop Distributed File System

.5 Memory Paging
Control how the Virtual Memory are shared. When lack of RAM, CPU use storage as disk to act as RAM -> 
Page file.

.6 Distributed Cached
Cache = normally memory database design for quick retrieval just like NoSQL
Cache distributed in each nodes (copies will be store in different nodes)

.7 How browser works:
Enter address into browser, the B will establish a Http connection to the server, download HTML. 
Then it builds a DOM object (document object model as a tree), then download css, script, images
Javascript can change DOM on the fly. 

.8 Consumer and Producer:
Semaphore is a new type (~ interger only allow 2 operations: wait(s) and signal(s))
. wait(s) : wait for s to  be > 0, then s = s - 1 and return (atomic operation)
. sign(s) : simply increment s = s + 1

(binary semaphore) 0 or 1 (use as lock)

Semaphore introduces deadlock:
To solve dead lock , assign number to resource, for all processes, try to access the resource with
lower number if cannot then wait

.9 A Prime
$99/year
free 2-day shipping (normally above $35 for free shipping)
free book for rent 
Amazon Prime Music
Amazon Prime Instant Video vs Netflix, Hulu Plus

.10
Quicksort: 
	. best & average: O(nlogn) when partion is balance
	. worst: O(n^2) when partition is not balanced (can be fixed by randomize pivot)

	+ space: in place sort O(n)

Mergesort:
	. average O(nlogn)
	+ space = n ( 1/2 + 1/4 + ...) ~ 0(n)

.11
SOLID in OOP design
S -> Single responsible
	class should have 1 responsibility

O -> Open closed 
	don't use if/else, 
	use inheritance and override methods

L -> Liskov substitute
	B inherit A, function use A must not know anything abount B, or else 
	B cannot inherit A
	For example Triangle3d <- Triangle is a bad interitance

I -> Interface Segregation
	Create new interface, keep old 

D -> Dependency inversion
	don't create object B within A
	instead abstract B to IB and use IB in A via:
	. constructor injection
	. property injection
	. method injection


.12
Customer Obsession
Leaders start with the customer and work backwards. They work vigorously to earn and keep customer trust. Although leaders pay attention to competitors, they obsess over customers. 
-> promise the function and deliver on time.

Ownership
Leaders are owners. They think long term and don’t sacrifice long-term value for short-term results. They act on behalf of the entire company, beyond just their own team. They never say “that’s not my job." 
-> Volunteer to do everything, data entry, servers setup, wiring setup in demo room

Invent and Simplify
Leaders expect and require innovation and invention from their teams and always find ways to simplify. They are externally aware, look for new ideas from everywhere, and are not limited by “not invented here." As we do new things, we accept that we may be misunderstood for long periods of time. 
-> solve problem of jobqueue download from WCF (Soap Message) to simple file transfer when jobqueue overflow

Are Right, A Lot
Leaders are right a lot. They have strong business judgment and good instincts. 

Hire and Develop the Best
Leaders raise the performance bar with every hire and promotion. They recognize exceptional talent, and willingly move them throughout the organization. Leaders develop leaders and take seriously their role in coaching others. 

Insist on the Highest Standards
Leaders have relentlessly high standards - many people may think these standards are unreasonably high. Leaders are continually raising the bar and driving their teams to deliver high quality products, services and processes. Leaders ensure that defects do not get sent down the line and that problems are fixed so they stay fixed. 
-> Test test test 

Think Big
Thinking small is a self-fulfilling prophecy. Leaders create and communicate a bold direction that inspires results. They think differently and look around corners for ways to serve customers. 
-> 

Bias for Action
Speed matters in business. Many decisions and actions are reversible and do not need extensive study. We value calculated risk taking. 

Frugality
We try not to spend money on things that don’t matter to customers. Frugality breeds resourcefulness, self-sufficiency, and invention. There are no extra points for headcount, budget size, or fixed expense. 

Vocally Self Critical
Leaders do not believe their or their team’s body odor smells of perfume. Leaders come forward with problems or information, even when doing so is awkward or embarrassing. Leaders benchmark themselves and their teams against the best. 

Earn Trust of Others
Leaders are sincerely open-minded, genuinely listen, and are willing to examine their strongest convictions with humility. 

Dive Deep
Leaders operate at all levels, stay connected to the details, and audit frequently. No task is beneath them. 

Have Backbone; Disagree and Commit
Leaders are obligated to respectfully challenge decisions when they disagree, even when doing so is uncomfortable or exhausting. Leaders have conviction and are tenacious. They do not compromise for the sake of social cohesion. Once a decision is determined, they commit wholly. 
-> disagree

Deliver Results
Leaders focus on the key inputs for their business and deliver them with the right quality and in a timely fashion. Despite setbacks, they rise to the occasion and never settle. 
-> deliver client program in 3 months



.13 Res
Heu:
	. VLC (virtual class room): secondary schools in singapore, and school in Aus
	jabber server / jabber client wrap by .net Api, 
	tablet pc, drawing, share screen, assignment, collaboration, 
	design and development 

	. Tax Security workflow (Centera api), store file to File Server and store Hash to Database,
	hard to tamper tax file (need to retrieve hash from DB, use program to get file)

	. Windows client app -> manipulate minutia, submit to server for matching
	jobqueue (server jobqueue, local jobqueue)
	aim, data migration, oracle installation to LUN of SAN

	. mobility platfom: 
	net platform with asp.net for mobile website run on android device, objective-c on iPhone device
	write selenium test for GUI (CSS, html, jquery)
	implement signing function to SHA2	





















