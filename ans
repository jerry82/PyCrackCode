12.1. How to store stock price:

open, high, low, close = 5000 x 4 = 20,000
1000 daily users : 
Solutions:
use Text file: (hard to modified)
use XML file: (easy to read, moderate to modify if data is big)
use Database: (easy to read, write, load balance, extensible)


12.2. represent big graph Facebook or Linkedin

Use graph data structure
represent each person as a class 
graph node store only person id

public class Person {
	public String Name { get; set; }
	public String LastName { get; set; }
	public String Email { get; set; }
	public String Id { get; set; }
	public List<string> FriendIds { get; set; }
}

public class Node {
	public string Id { get; set; }
	public string personId { get; set }
	public List<string> FIds { get; set; }
	public string MachineId { get; set; }


}

AppLogic.getFriends(visited, curNode);

public class AppLogic {
	//...

	public Person getPerson(Node node) {
		string machineId = noe.MachineId;

		return Server.getPerson(machineId, node.Id);
	}

	//...
}

public class Program {
	
	private Graph _graph = null
	public Program(Graph graph) {
		_graph = graph;
	}

	//implement BFS
	public void BuildPath(string person1Id, string person2Id) {

		TraceNode node1Id = DB.getNodeId(person1Id);
		TraceNode node2Id = DB.getNodeId(person2Id);

		//BFS to connect node
		Dictionary<TraceNode, int> visited = new Dictionary<TraceNode, int>()		
		Queue<TraceNode> myQ = new Queue<TraceNode>();
		myQ.Enqueue(node1Id);

		while(myQ.Count > 0) {
			TraceNode curNode = myQ.Dequeue();
			visited.Add(curNode, 1);

			//make sure the friend not in visted list
			List<TraceNode> friends = AppLogic.getFriends(visited, curNode);
			foreach (TraceNode friend in friends) { 
				if (friend == node2Id) {
					//found
					break;
				}

				//for trace back
				friend.Prev = curNode
				myQ.Enqueue(friend)
			}
		}

		//DFS
		Stack<TraceNode> myS = new Stack<TraceNode>();

		myS.Push(node1Id);

		while (myS.Count > 0) {
			TraceNode cur = myS.Peek();

			visited.Add(cur);

			//friend not visited and friend has some similiar geographical location with node2Id
			TraceNode friend = AppLogic.getOneFriend(visited, cur);

			if (friend != null) {

				if (friend == node2Id) {
					//found
					break;
				}
				//for backtracking
				friend.prev = curNode
				myS.Push(friend);
				visited.Add(friend, 1);
			}
			else {
				myS.Pop();
			}


		}

	}
}
